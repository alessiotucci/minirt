!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/nfs/homes/atucci/Desktop/mioGithubMiniRT/matrix/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
cofactor	determinant.c	/^double	cofactor(int row, int col, double **matrix, int size)$/;"	f	typeref:typename:double
comparing_heap_matrix	operations_matrix.c	/^int	comparing_heap_matrix(int rows, int cols, double **a, double **b)$/;"	f	typeref:typename:int
copy_matrix	initialize_matrix.c	/^double	**copy_matrix(int rows, int cols, double **source)$/;"	f	typeref:typename:double **
copy_row_value	initialize_matrix.c	/^void	copy_row_value(double destination[4], double source[4])$/;"	f	typeref:typename:void
create_identity_matrix	operations_matrix.c	/^void	create_identity_matrix(double	**ret)$/;"	f	typeref:typename:void
determinant	determinant.c	/^double	determinant(double **matrix, int size)$/;"	f	typeref:typename:double
determinant_n	determinant.c	/^double	determinant_n(double **matrix, int size)$/;"	f	typeref:typename:double
determinant_two	determinant.c	/^double	determinant_two(double **matrix)$/;"	f	typeref:typename:double
divide_matrix	inversing.c	/^double	**divide_matrix(int size, double **source, double det)$/;"	f	typeref:typename:double **
divide_matrix_void	void.c	/^void	divide_matrix_void(int size, double **source, double det)$/;"	f	typeref:typename:void
free_heap_matrix	matrix_utils.c	/^void	free_heap_matrix(double **matrix, int rows)$/;"	f	typeref:typename:void
init_heap_matrix	matrix_utils.c	/^void	init_heap_matrix(int rows, int cols, double **matrix)$/;"	f	typeref:typename:void
init_zero_matrix	matrix_utils.c	/^void	init_zero_matrix(int rows, int cols, double matrix[rows][cols])$/;"	f	typeref:typename:void
inversing_matrix	inversing.c	/^double	**inversing_matrix(int s, double **src)$/;"	f	typeref:typename:double **
inversing_matrix_void	void.c	/^void	inversing_matrix_void(int size, double **source)$/;"	f	typeref:typename:void
is_matrix_invertible	inversing.c	/^int	is_matrix_invertible(int s, double **matrix)$/;"	f	typeref:typename:int
malloc_matrix	matrix_utils.c	/^double	**malloc_matrix(int rows, int col)$/;"	f	typeref:typename:double **
matrix_of_cofactors	inversing.c	/^double	**matrix_of_cofactors(int size, double **matrix)$/;"	f	typeref:typename:double **
matrix_of_cofactors_void	void.c	/^void	matrix_of_cofactors_void(int size, double **matrix, double **n)$/;"	f	typeref:typename:void
matrix_x_vector	operations_matrix.c	/^t_vector	matrix_x_vector(double **a, t_vector b)$/;"	f	typeref:typename:t_vector
minor	determinant.c	/^double	minor(int row, int col, double **matrix, int size)$/;"	f	typeref:typename:double
multiply_matrix	operations_matrix.c	/^double	**multiply_matrix(int cols_a, int rows_b, double **a, double **b)$/;"	f	typeref:typename:double **
print_int_matrix	matrix_utils.c	/^void	print_int_matrix(int rows, int cols, double **matrix)$/;"	f	typeref:typename:void
submatrix	submatrix.c	/^double	**submatrix(int index_rows, int index_cols, double **matrix, int size)$/;"	f	typeref:typename:double **
transposing	inversing.c	/^double	**transposing(int rows, int cols, double **matrix)$/;"	f	typeref:typename:double **
transposing_void	void.c	/^void	transposing_void(int rows, int cols, double **matrix)$/;"	f	typeref:typename:void
value_matrix	initialize_matrix.c	/^double	**value_matrix(double a[4], double b[4], double c[4], double d[4])$/;"	f	typeref:typename:double **
