!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/nfs/homes/atucci/Desktop/mioGithubMiniRT/raycasting/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
cast_rays	cast_ray.c	/^void	cast_rays(t_mlx *data)$/;"	f	typeref:typename:void
create_ray	create_ray.c	/^t_ray	create_ray(t_vector origin, t_vector direction)$/;"	f	typeref:typename:t_ray
create_ray_from_camera	cast_ray.c	/^t_ray	create_ray_from_camera(t_mlx *data, int x, int y)$/;"	f	typeref:typename:t_ray
create_ray_from_camera2	cast_ray.c	/^t_ray create_ray_from_camera2(t_mlx *data, int x, int y)$/;"	f	typeref:typename:t_ray
each_pixel_calculation	cast_ray_helper.c	/^void	each_pixel_calculation(t_mlx *data, int x, int y)$/;"	f	typeref:typename:void
get_color_intersect	cast_ray_helper.c	/^t_color	get_color_intersect(t_object obj)$/;"	f	typeref:typename:t_color
get_discriminant	intersection_ray.c	/^double	get_discriminant(t_vector sphere_to_ray, t_ray ray, double diameter)$/;"	f	typeref:typename:double
get_sphere_to_ray	intersection_ray.c	/^t_vector	get_sphere_to_ray(t_sphere sphere, t_ray ray)$/;"	f	typeref:typename:t_vector
hit_v2	hit.c	/^t_intersection	*hit_v2(t_list_intersect *list)$/;"	f	typeref:typename:t_intersection *
position_ray	create_ray.c	/^t_vector	position_ray(t_ray ray, double t)$/;"	f	typeref:typename:t_vector
print_ray	create_ray.c	/^void	print_ray(t_ray ray)$/;"	f	typeref:typename:void
print_type	utils_obj.c	/^int	print_type(t_object obj)$/;"	f	typeref:typename:int
project_point_to_2d	cast_ray.c	/^t_vector project_point_to_2d(t_vector point, t_camera *camera, int width, int height)$/;"	f	typeref:typename:t_vector
set_sphere_transformations	transformation_ray.c	/^void	set_sphere_transformations(t_sphere *sphere, double **new)$/;"	f	typeref:typename:void
transform_ray	transformation_ray.c	/^t_ray	transform_ray(t_ray original, double **matrix)$/;"	f	typeref:typename:t_ray
