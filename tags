!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/nfs/homes/atucci/Desktop/mioGithubMiniRT/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(NAME)	Makefile	/^$(NAME): $(OBJ)$/;"	t
$(NAME)	libft/Makefile	/^$(NAME):$/;"	t
$(NAME)	mlx/Makefile.mk	/^$(NAME)	: $(OBJ)$/;"	t
$(NAME)	mlx/test/Makefile.mk	/^$(NAME): $(OBJ)$/;"	t
$(OBJ_DIR)/%.o	mlx/Makefile.mk	/^$(OBJ_DIR)\/%.o: %.c$/;"	t
%.o	Makefile	/^%.o: %.c$/;"	t
A	minirt.h	/^# define A /;"	d
ARROW_DOWN	minirt.h	/^# define ARROW_DOWN /;"	d
ARROW_LEFT	minirt.h	/^# define ARROW_LEFT /;"	d
ARROW_RIGHT	minirt.h	/^# define ARROW_RIGHT /;"	d
ARROW_UP	minirt.h	/^# define ARROW_UP /;"	d
AUTHOR	mlx/man/man1/mlx.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man1/mlx_loop.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man1/mlx_new_image.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man1/mlx_new_window.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man1/mlx_pixel_put.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man3/mlx.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man3/mlx_loop.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man3/mlx_new_image.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man3/mlx_new_window.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man3/mlx_pixel_put.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
BG_CYAN	minirt.h	/^# define BG_CYAN /;"	d
BG_GREEN	minirt.h	/^# define BG_GREEN /;"	d
BG_RED	minirt.h	/^# define BG_RED /;"	d
BG_RESET	minirt.h	/^# define BG_RESET /;"	d
BG_YELLOW	minirt.h	/^# define BG_YELLOW /;"	d
BLUE	minirt.h	/^# define BLUE /;"	d
BUFFER_SIZE	libft/libft.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC = cc$/;"	m
CC	mlx/Makefile.mk	/^	CC = clang$/;"	m
CC	mlx/Makefile.mk	/^CC	= gcc$/;"	m
CC	mlx/test/Makefile.mk	/^	CC	= gcc$/;"	m
CC	mlx/test/Makefile.mk	/^	CC = clang$/;"	m
CFILES	libft/Makefile	/^CFILES	= $(files:%=%.c)$/;"	m
CFLAGS	mlx/Makefile.mk	/^CFLAGS	= -O3 -I$(INC)$/;"	m
CFLAGS	mlx/test/Makefile.mk	/^CFLAGS= -I$(INC) -O3 -I.. -g$/;"	m
COLOR	mlx/man/man1/mlx_pixel_put.1	/^.SH COLOR MANAGEMENT$/;"	s	title:MiniLibX
COLOR	mlx/man/man3/mlx_pixel_put.3	/^.SH COLOR MANAGEMENT$/;"	s	title:MiniLibX
COLOR_BLACK	minirt.h	/^# define COLOR_BLACK /;"	d
COLOR_BLUE	minirt.h	/^# define COLOR_BLUE /;"	d
COLOR_CYAN	minirt.h	/^# define COLOR_CYAN /;"	d
COLOR_GREEN	minirt.h	/^# define COLOR_GREEN /;"	d
COLOR_MAGENTA	minirt.h	/^# define COLOR_MAGENTA /;"	d
COLOR_RED	minirt.h	/^# define COLOR_RED /;"	d
COLOR_WHITE	minirt.h	/^# define COLOR_WHITE /;"	d
COLOR_YELLOW	minirt.h	/^# define COLOR_YELLOW /;"	d
CYAN	Makefile	/^CYAN := \\033[1;36m$/;"	m
CYAN	minirt.h	/^# define CYAN /;"	d
CmpFlags	libft/Makefile	/^CmpFlags	= -Wall -Wextra -Werror$/;"	m
Compilation and Dependencies	README.md	/^## Compilation and Dependencies $/;"	s	chapter:minirt
Compiler	libft/Makefile	/^Compiler	= gcc$/;"	m
D	minirt.h	/^# define D /;"	d
DEFAULT_HEIGHT	minirt.h	/^# define DEFAULT_HEIGHT /;"	d
DEFAULT_WIDTH	minirt.h	/^# define DEFAULT_WIDTH /;"	d
DESCRIPTION	mlx/man/man1/mlx.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man1/mlx_loop.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man1/mlx_new_image.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man1/mlx_new_window.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man1/mlx_pixel_put.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man3/mlx.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man3/mlx_loop.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man3/mlx_new_image.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man3/mlx_new_window.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man3/mlx_pixel_put.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DIAMETER_DELTA	minirt.h	/^# define DIAMETER_DELTA /;"	d
EAST_WEST	minirt.h	/^# define EAST_WEST /;"	d
ENV_DISPLAY	mlx/mlx_int.h	/^# define ENV_DISPLAY /;"	d
EOF	mlx/configure	/^cat <<EOF$/;"	h
EPSILON	minirt.h	/^# define EPSILON /;"	d
EPSILON_V2	minirt.h	/^# define EPSILON_V2 /;"	d
ERR_NO_TRUECOLOR	mlx/mlx_int.h	/^# define ERR_NO_TRUECOLOR /;"	d
ESC	minirt.h	/^# define ESC /;"	d
ESCAPE	minirt.h	/^# define ESCAPE /;"	d
FLAG	Makefile	/^FLAG = -Wall -Wextra -Werror -O3 -gdwarf-4$/;"	m
GOING	mlx/man/man1/mlx_loop.1	/^.SH GOING FURTHER WITH EVENTS$/;"	s	title:MiniLibX
GOING	mlx/man/man3/mlx_loop.3	/^.SH GOING FURTHER WITH EVENTS$/;"	s	title:MiniLibX
GRAY	minirt.h	/^# define GRAY /;"	d
GREEN	Makefile	/^GREEN := \\033[1;32m$/;"	m
GREEN	minirt.h	/^# define GREEN /;"	d
HEADERS	Makefile	/^HEADERS = .\/minirt.h \\$/;"	m
HEIGHT_DELTA	minirt.h	/^# define HEIGHT_DELTA /;"	d
IM1_SX	mlx/test/main.c	/^#define	IM1_SX	/;"	d	file:
IM1_SY	mlx/test/main.c	/^#define	IM1_SY	/;"	d	file:
IM3_SX	mlx/test/main.c	/^#define	IM3_SX	/;"	d	file:
IM3_SY	mlx/test/main.c	/^#define	IM3_SY	/;"	d	file:
INC	mlx/Makefile.mk	/^INC	=%%%%$/;"	m
INC	mlx/test/Makefile.mk	/^INC=%%%%$/;"	m
INCLIB	mlx/test/Makefile.mk	/^INCLIB=$(INC)\/..\/lib$/;"	m
INCLUDE	mlx/man/man1/mlx.1	/^.SH INCLUDE FILE$/;"	s	title:MiniLibX
INCLUDE	mlx/man/man3/mlx.3	/^.SH INCLUDE FILE$/;"	s	title:MiniLibX
INCLUDES	Makefile	/^INCLUDES = -I\/usr\/include -I$(MLX_DIR)$/;"	m
KEY_E	minirt.h	/^# define KEY_E /;"	d
KEY_L	minirt.h	/^# define KEY_L /;"	d
KEY_Q	minirt.h	/^# define KEY_Q /;"	d
KEY_R	minirt.h	/^# define KEY_R /;"	d
KEY_W	minirt.h	/^# define KEY_W /;"	d
KEY_X	minirt.h	/^# define KEY_X /;"	d
KEY_Y	minirt.h	/^# define KEY_Y /;"	d
KEY_Z	minirt.h	/^# define KEY_Z /;"	d
LFLAGS	mlx/test/Makefile.mk	/^LFLAGS = -L.. -lmlx -L$(INCLIB) -lXext -lX11 -lm$/;"	m
LIBFT	Makefile	/^LIBFT = libft\/libft.a$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H	/;"	d
LIBRARY	mlx/man/man1/mlx.1	/^.SH LIBRARY FUNCTIONS$/;"	s	title:MiniLibX
LIBRARY	mlx/man/man3/mlx.3	/^.SH LIBRARY FUNCTIONS$/;"	s	title:MiniLibX
LINKING	mlx/man/man1/mlx.1	/^.SH LINKING MiniLibX$/;"	s	title:MiniLibX
LINKING	mlx/man/man3/mlx.3	/^.SH LINKING MiniLibX$/;"	s	title:MiniLibX
LOCALHOST	mlx/mlx_int.h	/^# define LOCALHOST /;"	d
Lectures	README.md	/^#### Lectures$/;"	t	section:minirt""UC davis Computer Graphics course
Library	libft/Makefile	/^Library		= libft$/;"	m
MAX_DELTA	minirt.h	/^# define MAX_DELTA /;"	d
MINIRT_H	minirt.h	/^# define MINIRT_H$/;"	d
MINUS	minirt.h	/^# define MINUS /;"	d
MLXFLAG	Makefile	/^MLXFLAG = -L$(MLX_DIR) -lmlx -L\/usr\/lib -lXext -lX11 -lm -lz$/;"	m
MLX_DIR	Makefile	/^MLX_DIR = .\/mlx$/;"	m
MLX_H	mlx/mlx.h	/^#define	MLX_H$/;"	d
MLX_INT_H	mlx/mlx_int.h	/^# define MLX_INT_H$/;"	d
MLX_MAX_EVENT	mlx/mlx_int.h	/^# define MLX_MAX_EVENT /;"	d
MLX_TYPE_SHM	mlx/mlx_int.h	/^# define MLX_TYPE_SHM /;"	d
MLX_TYPE_SHM_PIXMAP	mlx/mlx_int.h	/^# define MLX_TYPE_SHM_PIXMAP /;"	d
MLX_TYPE_XIMAGE	mlx/mlx_int.h	/^# define MLX_TYPE_XIMAGE /;"	d
MiniLibX	mlx/man/man1/mlx.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man1/mlx_loop.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man1/mlx_new_image.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man1/mlx_new_window.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man1/mlx_pixel_put.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man3/mlx.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man3/mlx_loop.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man3/mlx_new_image.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man3/mlx_new_window.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man3/mlx_pixel_put.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
NAME	Makefile	/^NAME = miniRT$/;"	m
NAME	libft/Makefile	/^NAME	= $(OUTN)$/;"	m
NAME	mlx/Makefile.mk	/^NAME		= libmlx.a$/;"	m
NAME	mlx/man/man1/mlx.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man1/mlx_loop.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man1/mlx_new_image.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man1/mlx_new_window.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man1/mlx_pixel_put.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man3/mlx.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man3/mlx_loop.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man3/mlx_new_image.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man3/mlx_new_window.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man3/mlx_pixel_put.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/test/Makefile.mk	/^NAME= mlx-test$/;"	m
NAME_UNAME	mlx/Makefile.mk	/^NAME_UNAME	= libmlx_$(UNAME).a$/;"	m
NORTH_SOUTH	minirt.h	/^# define NORTH_SOUTH /;"	d
OBJ	Makefile	/^OBJ = $(SOURCE:.c=.o)$/;"	m
OBJ	mlx/Makefile.mk	/^OBJ	= $(addprefix $(OBJ_DIR)\/,$(SRC:%.c=%.o))$/;"	m
OBJ	mlx/test/Makefile.mk	/^OBJ = $(SRC:%.c=%.o)$/;"	m
OBJ_DIR	mlx/Makefile.mk	/^OBJ_DIR = obj$/;"	m
OFILES	libft/Makefile	/^OFILES	= $(files:%=%.o)$/;"	m
OUTN	libft/Makefile	/^OUTN	= $(Library).a$/;"	m
PLUS	minirt.h	/^# define PLUS /;"	d
PURPLE	minirt.h	/^# define PURPLE /;"	d
RED	Makefile	/^RED := \\033[1;31m$/;"	m
RED	minirt.h	/^# define RED /;"	d
RESET	Makefile	/^RESET := \\033[0m$/;"	m
RESET	minirt.h	/^# define RESET /;"	d
RETURN	mlx/man/man1/mlx.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/man/man1/mlx_new_image.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/man/man1/mlx_new_window.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/man/man3/mlx.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/man/man3/mlx_new_image.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/man/man3/mlx_new_window.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
S	minirt.h	/^# define S /;"	d
SEE	mlx/man/man1/mlx.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man1/mlx_loop.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man1/mlx_new_image.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man1/mlx_new_window.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man1/mlx_pixel_put.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man3/mlx.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man3/mlx_loop.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man3/mlx_new_image.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man3/mlx_new_window.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man3/mlx_pixel_put.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SOURCE	Makefile	/^SOURCE = .\/main.c \\$/;"	m
SPACE	minirt.h	/^# define SPACE /;"	d
SRC	mlx/Makefile.mk	/^SRC	= mlx_init.c mlx_new_window.c mlx_pixel_put.c mlx_loop.c \\$/;"	m
SRC	mlx/test/Makefile.mk	/^SRC = main.c$/;"	m
STORING	mlx/man/man1/mlx_new_image.1	/^.SH STORING COLOR INSIDE IMAGES$/;"	s	title:MiniLibX
STORING	mlx/man/man3/mlx_new_image.3	/^.SH STORING COLOR INSIDE IMAGES$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man1/mlx.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man1/mlx_loop.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man1/mlx_new_image.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man1/mlx_new_window.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man1/mlx_pixel_put.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man3/mlx.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man3/mlx_loop.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man3/mlx_new_image.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man3/mlx_new_window.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man3/mlx_pixel_put.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
TEST_OBJ	Makefile	/^TEST_OBJ = $(TEST_SOURCE:.c=.o)$/;"	m
TEST_SOURCE	Makefile	/^TEST_SOURCE = $(filter-out .\/main.c, $(SOURCE))$/;"	m
TRANSLATION_SENSITIVITY	minirt.h	/^# define TRANSLATION_SENSITIVITY /;"	d
T_CAMERA	minirt.h	/^	T_CAMERA,$/;"	e	enum:e_type
T_CYLINDER	minirt.h	/^	T_CYLINDER,$/;"	e	enum:e_type
T_LIGHT	minirt.h	/^	T_LIGHT,$/;"	e	enum:e_type
T_NULL	minirt.h	/^	T_NULL$/;"	e	enum:e_type
T_PLANE	minirt.h	/^	T_PLANE,$/;"	e	enum:e_type
T_SPHERE	minirt.h	/^	T_SPHERE,$/;"	e	enum:e_type
UC davis Computer Graphics course	README.md	/^## UC davis Computer Graphics course$/;"	s	chapter:minirt
UC-davis-graphics-course	README.md	/^## UC-davis-graphics-course$/;"	s	chapter:minirt
UNAME	mlx/Makefile.mk	/^UNAME = $(shell uname)$/;"	m
UNAME	mlx/test/Makefile.mk	/^UNAME := $(shell uname)$/;"	m
W	minirt.h	/^# define W /;"	d
WARN_SHM_ATTACH	mlx/mlx_int.h	/^# define WARN_SHM_ATTACH /;"	d
WIN1_SX	mlx/test/main.c	/^#define	WIN1_SX	/;"	d	file:
WIN1_SY	mlx/test/main.c	/^#define	WIN1_SY	/;"	d	file:
X-WINDOW	mlx/man/man1/mlx.1	/^.SH X-WINDOW CONCEPT$/;"	s	title:MiniLibX
X-WINDOW	mlx/man/man1/mlx_loop.1	/^.SH X-WINDOW EVENTS$/;"	s	title:MiniLibX
X-WINDOW	mlx/man/man3/mlx.3	/^.SH X-WINDOW CONCEPT$/;"	s	title:MiniLibX
X-WINDOW	mlx/man/man3/mlx_loop.3	/^.SH X-WINDOW EVENTS$/;"	s	title:MiniLibX
XPM	mlx/man/man1/mlx_new_image.1	/^.SH XPM IMAGES$/;"	s	title:MiniLibX
XPM	mlx/man/man3/mlx_new_image.3	/^.SH XPM IMAGES$/;"	s	title:MiniLibX
X_ShmAttach	mlx/mlx_new_image.c	/^#define	X_ShmAttach	/;"	d	file:
YELLOW	Makefile	/^YELLOW := \\033[1;33m$/;"	m
YELLOW	minirt.h	/^# define YELLOW /;"	d
[`the first thing I search on youtube`](https://www.youtube.com/results?search_query=lectures+on+ray+tracing+from+ivy+college)	README.md	/^### [`the first thing I search on youtube`](https:\/\/www.youtube.com\/results?search_query=lect/;"	S	chapter:minirt
add	vector/vector_operations.c	/^t_vector	add(t_vector v1, t_vector v2)$/;"	f	typeref:typename:t_vector
add_colors	colors/operation_color.c	/^t_color	add_colors(t_color c1, t_color c2)$/;"	f	typeref:typename:t_color
add_cylinder_to_array	add_elem_array.c	/^void	add_cylinder_to_array(t_cylinder *to_add, t_setting *set)$/;"	f	typeref:typename:void
add_intersection_l	intersection/intersection_list.c	/^void	add_intersection_l(t_list_intersect **head, t_intersection *inter)$/;"	f	typeref:typename:void
add_lateral_intersection	intersection/intersection_cylinder.c	/^static	void	add_lateral_intersection(t_list_intersect **list,$/;"	f	typeref:typename:void	file:
add_light_to_array	add_elem_array.c	/^void	add_light_to_array(t_light *to_add, t_setting *set)$/;"	f	typeref:typename:void
add_plane_to_array	add_elem_array.c	/^void	add_plane_to_array(t_plane *to_add, t_setting *set)$/;"	f	typeref:typename:void
add_sphere_to_array	add_elem_array.c	/^void	add_sphere_to_array(t_sphere *to_add, t_setting *set)$/;"	f	typeref:typename:void
address	minirt.h	/^	void	*address;$/;"	m	struct:s_object	typeref:typename:void *
after that I looked into my old fdf to see if  I still remember anything about the mlx graphical library from 42:	README.md	/^#### after that I looked into my old fdf to see if  I still remember anything about the mlx grap/;"	t	subsection:minirt""[`the first thing I search on youtube`](https://www.youtube.com/results?search_query=lectures+on+ray+tracing+from+ivy+college)
all	Makefile	/^all: $(NAME)$/;"	t
all	libft/Makefile	/^all: $(NAME)$/;"	t
all	mlx/Makefile	/^all	: do_configure$/;"	t
all	mlx/Makefile.mk	/^all	: $(NAME)$/;"	t
all	mlx/test/Makefile.mk	/^all: $(NAME)$/;"	t
alloc_struct_elem	create_setting.c	/^void	alloc_struct_elem(t_setting *setting)$/;"	f	typeref:typename:void
amb_light	minirt.h	/^	t_amb_light		*amb_light;$/;"	m	struct:s_setting	typeref:typename:t_amb_light *
ambient	minirt.h	/^	double	ambient;$/;"	m	struct:s_material	typeref:typename:double
aspect_ratio	draw_scene.c	/^void	aspect_ratio(t_mlx *mlx, double *aspect_ratio)$/;"	f	typeref:typename:void
assign_material_sphere	shadows/material.c	/^void	assign_material_sphere(t_sphere *s, t_material new)$/;"	f	typeref:typename:void
at_exit	mlx/test/run_tests.sh	/^at_exit() {$/;"	f
axis	minirt.h	/^	t_vector	axis;$/;"	m	struct:s_cylinder	typeref:typename:t_vector
b	minirt.h	/^	double	b;$/;"	m	struct:s_color	typeref:typename:double
bits	minirt.h	/^	int				bits;$/;"	m	struct:s_mlx	typeref:typename:int
bpp	mlx/mlx_int.h	/^	int				bpp;$/;"	m	struct:s_img	typeref:typename:int
bpp1	mlx/test/main.c	/^int	bpp1;$/;"	v	typeref:typename:int
bpp2	mlx/test/main.c	/^int	bpp2;$/;"	v	typeref:typename:int
bpp3	mlx/test/main.c	/^int	bpp3;$/;"	v	typeref:typename:int
bpp4	mlx/test/main.c	/^int	bpp4;$/;"	v	typeref:typename:int
brightness	minirt.h	/^	double		brightness;$/;"	m	struct:s_light	typeref:typename:double
calculate_cam_vectors	raycasting/cast_ray.c	/^static void	calculate_cam_vectors(t_camera *cam, t_vector vec[4])$/;"	f	typeref:typename:void	file:
calculate_offsets	raycasting/cast_ray.c	/^static void	calculate_offsets(int x, int y, t_mlx *data, double offsets[2])$/;"	f	typeref:typename:void	file:
calculate_sphere_color	shapes/sphere.c	/^int	calculate_sphere_color(t_intersection *intersection)$/;"	f	typeref:typename:int
calculate_t_values	intersection/intersection_sphere.c	/^static void	calculate_t_values(double *t, t_vector sph_ray, t_ray ray, double r)$/;"	f	typeref:typename:void	file:
calculate_translation_delta_perp_to_camera	rendering/translation_handlers.c	/^t_vector	calculate_translation_delta_perp_to_camera(t_mlx *mlx, int x,$/;"	f	typeref:typename:t_vector
camera	minirt.h	/^	t_camera		*camera;$/;"	m	struct:s_setting	typeref:typename:t_camera *
camera_image_plane	draw_scene.c	/^void	camera_image_plane(t_mlx *mlx)$/;"	f	typeref:typename:void
camera_info_str	selection_status.c	/^char	*camera_info_str(t_camera *cam)$/;"	f	typeref:typename:char *
cast_mouse_ray	rendering/rendering_utils.c	/^int	cast_mouse_ray(int x, int y, t_mlx *mlx, t_setting *set)$/;"	f	typeref:typename:int
cast_rays	raycasting/cast_ray.c	/^void	cast_rays(t_mlx *data)$/;"	f	typeref:typename:void
center	minirt.h	/^	t_vector	center;$/;"	m	struct:s_cylinder	typeref:typename:t_vector
center	minirt.h	/^	t_vector	center;$/;"	m	struct:s_sphere	typeref:typename:t_vector
check	mlx/Makefile.mk	/^check: all$/;"	t
check_cap_cylinder	intersection/cylinder_utils.c	/^static int	check_cap_cylinder(t_ray ray, double t)$/;"	f	typeref:typename:int	file:
check_null_array	extra/utils.c	/^int	check_null_array(char **array)$/;"	f	typeref:typename:int
check_sign	libft/ft_num_utils.c	/^int	check_sign(int num)$/;"	f	typeref:typename:int
check_the_extension	main.c	/^int	check_the_extension(char *filename, char *ext)$/;"	f	typeref:typename:int
clamp_delta	colors/clamp.c	/^t_vector	clamp_delta(t_vector delta, double max_val)$/;"	f	typeref:typename:t_vector
clean	Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
clean	mlx/Makefile	/^clean	:$/;"	t
clean	mlx/Makefile.mk	/^clean	:$/;"	t
clean	mlx/configure	/^clean(){$/;"	f
clean	mlx/test/Makefile.mk	/^clean:$/;"	t
clean_close	mlx_utils.c	/^void	clean_close(t_mlx *project)$/;"	f	typeref:typename:void
clean_mlx	Makefile	/^clean_mlx:$/;"	t
clean_test	Makefile	/^clean_test: fclean$/;"	t
closed	minirt.h	/^	int			closed;$/;"	m	struct:s_cylinder	typeref:typename:int
cmap	mlx/mlx_int.h	/^	Colormap	cmap;$/;"	m	struct:s_xvar	typeref:typename:Colormap
cofactor	matrix/determinant.c	/^double	cofactor(int row, int col, double **matrix, int size)$/;"	f	typeref:typename:double
col	mlx/mlx_int.h	/^	int		col;$/;"	m	struct:s_xpm_col	typeref:typename:int
color	minirt.h	/^	t_color		color;$/;"	m	struct:s_cylinder	typeref:typename:t_color
color	minirt.h	/^	t_color		color;$/;"	m	struct:s_light	typeref:typename:t_color
color	minirt.h	/^	t_color		color;$/;"	m	struct:s_plane	typeref:typename:t_color
color	minirt.h	/^	t_color		color;$/;"	m	struct:s_sphere	typeref:typename:t_color
color	minirt.h	/^	t_color	color;$/;"	m	struct:s_amb_light	typeref:typename:t_color
color	minirt.h	/^	t_color	color;\/\/ material can get color from the shape$/;"	m	struct:s_material	typeref:typename:t_color
color	mlx/mlx_int.h	/^	int		color;$/;"	m	struct:s_col_name	typeref:typename:int
color_map_1	mlx/test/main.c	/^int	color_map_1(void *win,int w,int h)$/;"	f	typeref:typename:int
color_map_2	mlx/test/main.c	/^int	color_map_2(unsigned char *data,int bpp,int sl,int w,int h,int endian, int type)$/;"	f	typeref:typename:int
comparing_double	extra/comparing.c	/^int	comparing_double(double a, double b)$/;"	f	typeref:typename:int
comparing_heap_matrix	matrix/operations_matrix.c	/^int	comparing_heap_matrix(int rows, int cols, double **a, double **b)$/;"	f	typeref:typename:int
comparing_vector	extra/comparing.c	/^int	comparing_vector(t_vector a, t_vector b)$/;"	f	typeref:typename:int
compute_cylinder_normal	normal.c	/^t_vector	compute_cylinder_normal(t_cylinder *cy, t_vector point)$/;"	f	typeref:typename:t_vector
compute_cylinder_quadratic_coeff	intersection/intersection_cylinder.c	/^static	void	compute_cylinder_quadratic_coeff(double coeff[3],$/;"	f	typeref:typename:void	file:
concatenate_lists	intersection/intersection_list.c	/^void	concatenate_lists(t_list_intersect **list1, t_list_intersect *list2)$/;"	f	typeref:typename:void
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
convert_color	colors/converting_color.c	/^t_color	convert_color(t_color old)$/;"	f	typeref:typename:t_color
convert_color_inverse	colors/converting_color.c	/^t_color	convert_color_inverse(t_color color)$/;"	f	typeref:typename:t_color
convert_component	colors/converting_color.c	/^double	convert_component(double component)$/;"	f	typeref:typename:double
convert_component_inverse	colors/converting_color.c	/^double	convert_component_inverse(double component)$/;"	f	typeref:typename:double
copy_matrix	matrix/initialize_matrix.c	/^double	**copy_matrix(int rows, int cols, double **source)$/;"	f	typeref:typename:double **
copy_row_value	matrix/initialize_matrix.c	/^void	copy_row_value(double destination[4], double source[4])$/;"	f	typeref:typename:void
copy_simple_fields_cylinder	intersection/copy_simple_field.c	/^void	copy_simple_fields_cylinder(t_cylinder *dest, t_cylinder*src)$/;"	f	typeref:typename:void
copy_simple_fields_plane	intersection/copy_simple_field.c	/^void	copy_simple_fields_plane(t_plane *dest, t_plane *src)$/;"	f	typeref:typename:void
copy_simple_fields_sphere	intersection/copy_simple_field.c	/^void	copy_simple_fields_sphere(t_sphere *dest, t_sphere *src)$/;"	f	typeref:typename:void
count_elements	create_setting.c	/^void	count_elements(char **details, t_setting *set)$/;"	f	typeref:typename:void
count_elements_wrap	parsing/parsing_map.c	/^static void	count_elements_wrap(char **matrix, t_setting *set)$/;"	f	typeref:typename:void	file:
create_color	colors/operation_color.c	/^t_color	create_color(double r, double g, double b)$/;"	f	typeref:typename:t_color
create_cylinder	shapes/cylinder.c	/^t_cylinder	create_cylinder(char *id, t_vector center, double d, t_color c)$/;"	f	typeref:typename:t_cylinder
create_from_line	parsing/parsing_map.c	/^static void	create_from_line(char **matrix, t_setting *set)$/;"	f	typeref:typename:void	file:
create_identity_matrix	matrix/operations_matrix.c	/^void	create_identity_matrix(double	**ret)$/;"	f	typeref:typename:void
create_new_node	intersection/intersection_list.c	/^t_list_intersect	*create_new_node(t_intersection *intersection)$/;"	f	typeref:typename:t_list_intersect *
create_plane_ray	intersection/intersection_plane.c	/^static t_ray	create_plane_ray(t_plane *plane, t_ray old_ray)$/;"	f	typeref:typename:t_ray	file:
create_point	vector/utils_vectors.c	/^t_vector	create_point(double x, double y, double z)$/;"	f	typeref:typename:t_vector
create_ray	raycasting/create_ray.c	/^t_ray	create_ray(t_vector origin, t_vector direction)$/;"	f	typeref:typename:t_ray
create_ray_from_camera2	raycasting/cast_ray.c	/^t_ray	create_ray_from_camera2(t_mlx *data, int x, int y)$/;"	f	typeref:typename:t_ray
create_scaling_matrix	transformations/scaling.c	/^double	**create_scaling_matrix(t_vector move)$/;"	f	typeref:typename:double **
create_setting	create_setting.c	/^void	create_setting(char **details, t_setting *set)$/;"	f	typeref:typename:void
create_sphere_ray	intersection/intersection_sphere.c	/^static t_ray	create_sphere_ray(t_sphere *sphere, t_ray old_ray)$/;"	f	typeref:typename:t_ray	file:
create_translation_matrix	transformations/translations.c	/^double	**create_translation_matrix(t_vector move)$/;"	f	typeref:typename:double **
create_trgb	colors/colors.c	/^int	create_trgb(t_color color)$/;"	f	typeref:typename:int
create_vector	vector/utils_vectors.c	/^t_vector	create_vector(double x, double y, double z)$/;"	f	typeref:typename:t_vector
cross	vector/complex_operations.c	/^t_vector	cross(t_vector a, t_vector b)$/;"	f	typeref:typename:t_vector
cylinders	minirt.h	/^	t_cylinder		**cylinders;$/;"	m	struct:s_setting	typeref:typename:t_cylinder **
data	mlx/mlx_int.h	/^	char			*data;$/;"	m	struct:s_img	typeref:typename:char *
data1	mlx/test/main.c	/^char	*data1;$/;"	v	typeref:typename:char *
data2	mlx/test/main.c	/^char	*data2;$/;"	v	typeref:typename:char *
data3	mlx/test/main.c	/^char	*data3;$/;"	v	typeref:typename:char *
data4	mlx/test/main.c	/^char	*data4;$/;"	v	typeref:typename:char *
decrease_cylinder_height	rendering/rotation_handlers.c	/^void	decrease_cylinder_height(t_mlx *data)$/;"	f	typeref:typename:void
decrease_object_diameter	rendering/change_diameter.c	/^void	decrease_object_diameter(t_mlx *data)$/;"	f	typeref:typename:void
decrgb	mlx/mlx_int.h	/^	int			decrgb[6];$/;"	m	struct:s_xvar	typeref:typename:int[6]
deep_copy_cylinder	intersection/intersection.c	/^t_cylinder	*deep_copy_cylinder(t_cylinder *src)$/;"	f	typeref:typename:t_cylinder *
deep_copy_plane	intersection/intersection.c	/^t_plane	*deep_copy_plane(t_plane *src)$/;"	f	typeref:typename:t_plane *
deep_copy_sphere	intersection/intersection.c	/^t_sphere	*deep_copy_sphere(t_sphere *src)$/;"	f	typeref:typename:t_sphere *
default_color	parsing/parsing_numbers.c	/^t_color	default_color(void)$/;"	f	typeref:typename:t_color
default_intersection	intersection/cylinder_utils.c	/^void	default_intersection(t_intersection *i1, t_intersection *i2)$/;"	f	typeref:typename:void
default_vector	parsing/parsing_numbers.c	/^t_vector	default_vector(void)$/;"	f	typeref:typename:t_vector
depth	mlx/mlx_int.h	/^	int			depth;$/;"	m	struct:s_xvar	typeref:typename:int
determinant	matrix/determinant.c	/^double	determinant(double **matrix, int size)$/;"	f	typeref:typename:double
determinant_n	matrix/determinant.c	/^double	determinant_n(double **matrix, int size)$/;"	f	typeref:typename:double
determinant_two	matrix/determinant.c	/^double	determinant_two(double **matrix)$/;"	f	typeref:typename:double
diameter	minirt.h	/^	double		diameter;$/;"	m	struct:s_cylinder	typeref:typename:double
diameter	minirt.h	/^	double		diameter;$/;"	m	struct:s_sphere	typeref:typename:double
diffuse	minirt.h	/^	double	diffuse;$/;"	m	struct:s_material	typeref:typename:double
digits	libft/ft_itoa.c	/^static unsigned int	digits(int n)$/;"	f	typeref:typename:unsigned int	file:
direction	minirt.h	/^	t_vector	direction;$/;"	m	struct:s_ray	typeref:typename:t_vector
display	mlx/mlx_int.h	/^	Display		*display;$/;"	m	struct:s_xvar	typeref:typename:Display *
divide_matrix	matrix/inversing.c	/^double	**divide_matrix(int size, double **source, double det)$/;"	f	typeref:typename:double **
divide_matrix_void	matrix/void.c	/^void	divide_matrix_void(int size, double **source, double det)$/;"	f	typeref:typename:void
division	vector/vector_operations.c	/^t_vector	division(t_vector v, double scalar)$/;"	f	typeref:typename:t_vector
do_configure	mlx/Makefile	/^do_configure	:$/;"	t
do_flush	mlx/mlx_int.h	/^	int			do_flush;$/;"	m	struct:s_xvar	typeref:typename:int
dot	vector/complex_operations.c	/^double	dot(t_vector a, t_vector b)$/;"	f	typeref:typename:double
draw_scene	draw_scene.c	/^void	draw_scene(t_mlx *data)$/;"	f	typeref:typename:void
e_type	minirt.h	/^typedef enum e_type$/;"	g
each_pixel_calculation	raycasting/cast_ray_helper.c	/^void	each_pixel_calculation(t_mlx *data, int x, int y)$/;"	f	typeref:typename:void
end_loop	mlx/mlx_int.h	/^	int 		end_loop;$/;"	m	struct:s_xvar	typeref:typename:int
endian	minirt.h	/^	int				endian;$/;"	m	struct:s_mlx	typeref:typename:int
endian1	mlx/test/main.c	/^int	endian1;$/;"	v	typeref:typename:int
endian2	mlx/test/main.c	/^int	endian2;$/;"	v	typeref:typename:int
endian3	mlx/test/main.c	/^int	endian3;$/;"	v	typeref:typename:int
endian4	mlx/test/main.c	/^int	endian4;$/;"	v	typeref:typename:int
error_msg	main_utils.c	/^void	error_msg(char *str)$/;"	f	typeref:typename:void
expose_hook	mlx/mlx_int.h	/^	int					(*expose_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
expose_param	mlx/mlx_int.h	/^	void				*expose_param;$/;"	m	struct:s_win_list	typeref:typename:void *
expose_win1	mlx/test/main.c	/^int	expose_win1(void *p)$/;"	f	typeref:typename:int
expose_win2	mlx/test/main.c	/^int	expose_win2(void *p)$/;"	f	typeref:typename:int
eyev	minirt.h	/^	t_vector	eyev;$/;"	m	struct:s_computations	typeref:typename:t_vector
fclean	Makefile	/^fclean: clean$/;"	t
fclean	libft/Makefile	/^fclean: clean$/;"	t
files	libft/Makefile	/^files 	   = ft_strlen \\$/;"	m
fill_submatrix	matrix/submatrix.c	/^static void	fill_submatrix(double **new, double **matrix, int size, int *idx)$/;"	f	typeref:typename:void	file:
find_original	rendering/mouse_select.c	/^t_selected_obj	find_original(t_setting *setting, void *orig, t_type obj_type)$/;"	f	typeref:typename:t_selected_obj
find_original_cylinder	rendering/mouse_select.c	/^static t_selected_obj	find_original_cylinder(t_setting *setting, void *o)$/;"	f	typeref:typename:t_selected_obj	file:
find_original_plane	rendering/mouse_select.c	/^static t_selected_obj	find_original_plane(t_setting *setting, void *orig)$/;"	f	typeref:typename:t_selected_obj	file:
find_original_sphere	rendering/mouse_select.c	/^static t_selected_obj	find_original_sphere(t_setting *setting, void *orig)$/;"	f	typeref:typename:t_selected_obj	file:
find_previous_log	new_script_valgrind.pl	/^sub find_previous_log$/;"	s
format	mlx/mlx_int.h	/^	int				format;$/;"	m	struct:s_img	typeref:typename:int
fov	minirt.h	/^	int			fov;$/;"	m	struct:s_camera	typeref:typename:int
fov_calculation	draw_scene.c	/^void	fov_calculation(t_camera *cam, double *image_plane_width)$/;"	f	typeref:typename:void
free_cylinder_array	freeing2.c	/^void	free_cylinder_array(t_cylinder **cylinders, int num)$/;"	f	typeref:typename:void
free_heap_matrix	matrix/matrix_utils.c	/^void	free_heap_matrix(double **matrix, int rows)$/;"	f	typeref:typename:void
free_intersection	intersection/intersection.c	/^void	free_intersection(t_intersection *intersect)$/;"	f	typeref:typename:void
free_lights_array	freeing.c	/^void	free_lights_array(t_light **lights, int num)$/;"	f	typeref:typename:void
free_list	intersection/intersection_list.c	/^void	free_list(t_list_intersect **head)$/;"	f	typeref:typename:void
free_plane_array	freeing2.c	/^void	free_plane_array(t_plane **planes, int num)$/;"	f	typeref:typename:void
free_single_cylinder	freeing.c	/^void	free_single_cylinder(t_cylinder *cylinder)$/;"	f	typeref:typename:void
free_single_plane	freeing.c	/^void	free_single_plane(t_plane *plane)$/;"	f	typeref:typename:void
free_single_sphere	freeing.c	/^void	free_single_sphere(t_sphere *sphere)$/;"	f	typeref:typename:void
free_sphere_array	freeing.c	/^void	free_sphere_array(t_sphere **spheres, int num)$/;"	f	typeref:typename:void
free_string_array	extra/utils.c	/^int	free_string_array(char **array)$/;"	f	typeref:typename:int
free_struct	freeing2.c	/^void	free_struct(t_setting *set)$/;"	f	typeref:typename:void
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f	typeref:typename:int
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_free_null	libft/get_next_line.c	/^static void	*ft_free_null(char **buf, char **ptr, char **other_ptr)$/;"	f	typeref:typename:void *	file:
ft_how_many_words	libft/ft_split.c	/^size_t	ft_how_many_words(char const *s, char c)$/;"	f	typeref:typename:size_t
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int argum)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int argum)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int argum)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int argum)$/;"	f	typeref:typename:int
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int argum)$/;"	f	typeref:typename:int
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_len_u	libft/ft_pointer.c	/^int	ft_len_u(unsigned long n)$/;"	f	typeref:typename:int
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f) (void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *str, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *ptr1, const void *ptr2, size_t num)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *sour, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *dest, int v, size_t count)$/;"	f	typeref:typename:void *
ft_number_base	libft/ft_num_utils.c	/^int	ft_number_base(long long int nbr, char *base)$/;"	f	typeref:typename:int
ft_pointer	libft/ft_pointer.c	/^int	ft_pointer(unsigned long nb)$/;"	f	typeref:typename:int
ft_printf	libft/ft_printf.c	/^int	ft_printf(const char *format, ...)$/;"	f	typeref:typename:int
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr	libft/ft_num_utils.c	/^int	ft_putnbr(int n)$/;"	f	typeref:typename:int
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *c, int fd)$/;"	f	typeref:typename:void
ft_putuns	libft/ft_num_utils.c	/^int	ft_putuns(unsigned int nbr)$/;"	f	typeref:typename:int
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *sour)$/;"	f	typeref:typename:char *
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f	typeref:typename:void
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *sour, size_t destsize)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *sour, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f) (unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strncpy	libft/ft_split.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f	typeref:typename:char *
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *nedle, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int chad)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int chad)$/;"	f	typeref:typename:int
g	minirt.h	/^	double	g;$/;"	m	struct:s_color	typeref:typename:double
gc	mlx/mlx_int.h	/^	GC					gc;$/;"	m	struct:s_win_list	typeref:typename:GC
gc	mlx/mlx_int.h	/^	GC				gc;$/;"	m	struct:s_img	typeref:typename:GC
gere_mouse	mlx/test/new_win.c	/^int gere_mouse(int x,int y,int button,void*toto)$/;"	f	typeref:typename:int
get_color_intersect	raycasting/cast_ray_helper.c	/^t_color	get_color_intersect(t_object obj)$/;"	f	typeref:typename:t_color
get_discriminant	raycasting/intersection_ray.c	/^double	get_discriminant(t_vector sphere_to_ray, t_ray ray, double diameter)$/;"	f	typeref:typename:double
get_leak_info	new_script_valgrind.pl	/^sub get_leak_info$/;"	s
get_length	libft/get_next_line.c	/^static ssize_t	get_length(char *buf, int kind_of_calculation)$/;"	f	typeref:typename:ssize_t	file:
get_material	computation.c	/^static t_material	get_material(t_object obj)$/;"	f	typeref:typename:t_material	file:
get_next_line	libft/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
get_plane_normal	normal.c	/^static t_vector	get_plane_normal(t_plane *pl, t_ray ray)$/;"	f	typeref:typename:t_vector	file:
get_realloc	libft/get_next_line.c	/^static char	*get_realloc(char **buf, int kind_of_alloc)$/;"	f	typeref:typename:char *	file:
get_return	libft/get_next_line.c	/^static char	*get_return(char **buf)$/;"	f	typeref:typename:char *	file:
get_selected_object_position	rendering/translation_handlers.c	/^t_vector	get_selected_object_position(t_mlx *mlx)$/;"	f	typeref:typename:t_vector
get_selection_status	selection_status.c	/^char	*get_selection_status(t_selected_obj selected)$/;"	f	typeref:typename:char *
get_sphere_to_ray	raycasting/intersection_ray.c	/^t_vector	get_sphere_to_ray(t_sphere sphere, t_ray ray)$/;"	f	typeref:typename:t_vector
get_timestamp	new_script_valgrind.pl	/^sub get_timestamp$/;"	s
get_xlib_include_path	mlx/configure	/^get_xlib_include_path(){$/;"	f
handle_camera_keys	rendering/key_pressed.c	/^void	handle_camera_keys(int keycode, t_mlx *data)$/;"	f	typeref:typename:void
handle_intersections	intersection/intersection_sphere.c	/^static void	handle_intersections(t_list_intersect **lis, double *t, t_sphere *s)$/;"	f	typeref:typename:void	file:
handle_object_keys	rendering/key_pressed.c	/^void	handle_object_keys(int keycode, t_mlx *data)$/;"	f	typeref:typename:void
handle_plus_minus	rendering/key_pressed.c	/^void	handle_plus_minus(int keycode, t_mlx *data)$/;"	f	typeref:typename:void
height	minirt.h	/^	double		height;$/;"	m	struct:s_cylinder	typeref:typename:double
height	minirt.h	/^	int				height;$/;"	m	struct:s_mlx	typeref:typename:int
height	mlx/mlx_int.h	/^	int				height;$/;"	m	struct:s_img	typeref:typename:int
hidden	Makefile	/^hidden:$/;"	t
hit_v2	raycasting/hit.c	/^t_intersection	*hit_v2(t_list_intersect *list)$/;"	f	typeref:typename:t_intersection *
hook	mlx/mlx_int.h	/^	int		(*hook)();$/;"	m	struct:s_event_list	typeref:typename:int (*)()
hooks	mlx/mlx_int.h	/^	t_event_list		hooks[MLX_MAX_EVENT];$/;"	m	struct:s_win_list	typeref:typename:t_event_list[]
identifier	minirt.h	/^	char		*identifier;$/;"	m	struct:s_camera	typeref:typename:char *
identifier	minirt.h	/^	char		*identifier;$/;"	m	struct:s_cylinder	typeref:typename:char *
identifier	minirt.h	/^	char		*identifier;$/;"	m	struct:s_light	typeref:typename:char *
identifier	minirt.h	/^	char		*identifier;$/;"	m	struct:s_plane	typeref:typename:char *
identifier	minirt.h	/^	char		*identifier;$/;"	m	struct:s_sphere	typeref:typename:char *
identifier	minirt.h	/^	char	*identifier;$/;"	m	struct:s_amb_light	typeref:typename:char *
identity_value_matrix	transformations/scaling.c	/^void	identity_value_matrix(double **matrix, t_vector source)$/;"	f	typeref:typename:void
im1	mlx/test/main.c	/^void    *im1;$/;"	v	typeref:typename:void *
im2	mlx/test/main.c	/^void	*im2;$/;"	v	typeref:typename:void *
im3	mlx/test/main.c	/^void	*im3;$/;"	v	typeref:typename:void *
im4	mlx/test/main.c	/^void	*im4;$/;"	v	typeref:typename:void *
image	mlx/mlx_int.h	/^	XImage			*image;$/;"	m	struct:s_img	typeref:typename:XImage *
image_plane_dimensions	draw_scene.c	/^void	image_plane_dimensions(t_mlx *mlx, double *width, double *height)$/;"	f	typeref:typename:void
image_plane_height	minirt.h	/^	double		image_plane_height;$/;"	m	struct:s_camera	typeref:typename:double
image_plane_width	minirt.h	/^	double		image_plane_width;$/;"	m	struct:s_camera	typeref:typename:double
img_pointer	minirt.h	/^	void			*img_pointer;$/;"	m	struct:s_mlx	typeref:typename:void *
img_string	minirt.h	/^	char			*img_string;$/;"	m	struct:s_mlx	typeref:typename:char *
increase_cylinder_height	rendering/rotation_handlers.c	/^void	increase_cylinder_height(t_mlx *data)$/;"	f	typeref:typename:void
increase_object_diameter	rendering/change_diameter.c	/^void	increase_object_diameter(t_mlx *data)$/;"	f	typeref:typename:void
index	minirt.h	/^	int		index;$/;"	m	struct:s_selected_obj	typeref:typename:int
init_heap_matrix	matrix/matrix_utils.c	/^void	init_heap_matrix(int rows, int cols, double **matrix)$/;"	f	typeref:typename:void
init_scene	main.c	/^void	init_scene(t_mlx *info, char *mapname)$/;"	f	typeref:typename:void
init_zero_matrix	matrix/matrix_utils.c	/^void	init_zero_matrix(int rows, int cols, double matrix[rows][cols])$/;"	f	typeref:typename:void
insert_sorted	intersection/sort_intersection.c	/^void	insert_sorted(t_list_intersect **sorted, t_list_intersect *new)$/;"	f	typeref:typename:void
intersect_caps	intersection/cylinder_utils.c	/^void	intersect_caps(t_cylinder cyl, t_ray ray, t_list_intersect **list)$/;"	f	typeref:typename:void
intersect_cylinder	intersection/intersection_cylinder.c	/^t_list_intersect	*intersect_cylinder(t_cylinder *cylinder, t_ray old_ray)$/;"	f	typeref:typename:t_list_intersect *
intersect_plane	intersection/intersection_plane.c	/^t_list_intersect	*intersect_plane(t_plane *plane, t_ray old_ray)$/;"	f	typeref:typename:t_list_intersect *
intersect_sphere	intersection/intersection_sphere.c	/^t_list_intersect	*intersect_sphere(t_sphere *sphere, t_ray old_ray)$/;"	f	typeref:typename:t_list_intersect *
intersect_world	shadows/is_shadowed.c	/^t_list_intersect	*intersect_world(t_setting *world, t_ray ray)$/;"	f	typeref:typename:t_list_intersect *
intersection	intersection/intersection.c	/^t_intersection	intersection(double t, char *type, void *obj_address)$/;"	f	typeref:typename:t_intersection
intersection	minirt.h	/^	t_intersection			*intersection;$/;"	m	struct:s_list_intersect	typeref:typename:t_intersection *
inverse_translations	transformations/translations.c	/^t_vector	inverse_translations(t_vector move, t_vector origin)$/;"	f	typeref:typename:t_vector
inversing_matrix	matrix/inversing.c	/^double	**inversing_matrix(int s, double **src)$/;"	f	typeref:typename:double **
inversing_matrix_void	matrix/void.c	/^void	inversing_matrix_void(int size, double **source)$/;"	f	typeref:typename:void
is_a_point	vector/utils_vectors.c	/^int	is_a_point(t_vector vect)$/;"	f	typeref:typename:int
is_a_vector	vector/utils_vectors.c	/^int	is_a_vector(t_vector vect)$/;"	f	typeref:typename:int
is_matrix_invertible	matrix/inversing.c	/^int	is_matrix_invertible(int s, double **matrix)$/;"	f	typeref:typename:int
is_selected_null	selected_obj.c	/^int	is_selected_null(t_selected_obj *obj)$/;"	f	typeref:typename:int
is_shadowed	shadows/is_shadowed.c	/^int	is_shadowed(t_setting *world, t_vector point, t_light light)$/;"	f	typeref:typename:int
key_hook	mlx/mlx_int.h	/^	int					(*key_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
key_param	mlx/mlx_int.h	/^	void				*key_param;$/;"	m	struct:s_win_list	typeref:typename:void *
key_pressed	manage_mlx.c	/^static int	key_pressed(int keycode, void *param)$/;"	f	typeref:typename:int	file:
key_win1	mlx/test/main.c	/^int	key_win1(int key,void *p)$/;"	f	typeref:typename:int
key_win2	mlx/test/main.c	/^int	key_win2(int key,void *p)$/;"	f	typeref:typename:int
key_win3	mlx/test/main.c	/^int	key_win3(int key,void *p)$/;"	f	typeref:typename:int
lambert_lighting	shadows/lambert_reflection_model.c	/^t_color	lambert_lighting(t_setting *world, t_computations comps, t_light light)$/;"	f	typeref:typename:t_color
last_cols_value	transformations/translations.c	/^void	last_cols_value(int size, double **matrix, t_vector source)$/;"	f	typeref:typename:void
lenght_string_array	extra/utils.c	/^int	lenght_string_array(char **array)$/;"	f	typeref:typename:int
lenght_word	libft/ft_split.c	/^int	lenght_word(char const *s, char c)$/;"	f	typeref:typename:int
lights	minirt.h	/^	t_light			**lights;$/;"	m	struct:s_setting	typeref:typename:t_light **
local_endian	mlx/test/main.c	/^int	local_endian;$/;"	v	typeref:typename:int
local_point_in_cylinder	normal.c	/^t_vector	local_point_in_cylinder(t_cylinder *cylinder, t_vector point)$/;"	f	typeref:typename:t_vector
log_error	mlx/configure	/^log_error(){$/;"	f
log_error	mlx/test/run_tests.sh	/^log_error(){$/;"	f
log_info	mlx/configure	/^log_info(){$/;"	f
log_info	mlx/test/run_tests.sh	/^log_info(){$/;"	f
logging	mlx/configure	/^logging(){$/;"	f
logging	mlx/test/run_tests.sh	/^logging(){$/;"	f
loop_hook	mlx/mlx_int.h	/^	int			(*loop_hook)();$/;"	m	struct:s_xvar	typeref:typename:int (*)()
loop_over_cylinders	shadows/is_shadowed.c	/^static void	loop_over_cylinders(t_setting *world, t_ray ray,$/;"	f	typeref:typename:void	file:
loop_over_planes	shadows/is_shadowed.c	/^static void	loop_over_planes(t_setting *world, t_ray ray,$/;"	f	typeref:typename:void	file:
loop_over_spheres	shadows/is_shadowed.c	/^static void	loop_over_spheres(t_setting *world, t_ray ray,$/;"	f	typeref:typename:void	file:
loop_param	mlx/mlx_int.h	/^	void		*loop_param;$/;"	m	struct:s_xvar	typeref:typename:void *
lsize	minirt.h	/^	int				lsize;$/;"	m	struct:s_mlx	typeref:typename:int
magnitude	vector/complex_operations.c	/^double	magnitude(t_vector v)$/;"	f	typeref:typename:double
main	main.c	/^int	main(int ac, char **av)$/;"	f	typeref:typename:int
main	mlx/configure	/^main(){$/;"	f
main	mlx/test/main.c	/^int	main()$/;"	f	typeref:typename:int
main	mlx/test/new_win.c	/^int main()$/;"	f	typeref:typename:int
main	mlx/test/run_tests.sh	/^main(){$/;"	f
malloc_matrix	matrix/matrix_utils.c	/^double	**malloc_matrix(int rows, int col)$/;"	f	typeref:typename:double **
manage_mlx	manage_mlx.c	/^void	manage_mlx(t_mlx *obj)$/;"	f	typeref:typename:void
map_name	minirt.h	/^	char			*map_name;$/;"	m	struct:s_mlx	typeref:typename:char *
mask	mlx/mlx_int.h	/^	int		mask;$/;"	m	struct:s_event_list	typeref:typename:int
material	minirt.h	/^	t_material	material;$/;"	m	struct:s_computations	typeref:typename:t_material
material	minirt.h	/^	t_material	material;$/;"	m	struct:s_cylinder	typeref:typename:t_material
material	minirt.h	/^	t_material	material;$/;"	m	struct:s_plane	typeref:typename:t_material
material	minirt.h	/^	t_material	material;$/;"	m	struct:s_sphere	typeref:typename:t_material
material	shadows/material.c	/^t_material	material(t_color color)$/;"	f	typeref:typename:t_material
matrix_of_cofactors	matrix/inversing.c	/^double	**matrix_of_cofactors(int size, double **matrix)$/;"	f	typeref:typename:double **
matrix_of_cofactors_void	matrix/void.c	/^void	matrix_of_cofactors_void(int size, double **matrix, double **n)$/;"	f	typeref:typename:void
matrix_rotation_x	transformations/matrix_rotations.c	/^double	**matrix_rotation_x(double radians)$/;"	f	typeref:typename:double **
matrix_rotation_y	transformations/matrix_rotations.c	/^double	**matrix_rotation_y(double radians)$/;"	f	typeref:typename:double **
matrix_rotation_z	transformations/matrix_rotations.c	/^double	**matrix_rotation_z(double radians)$/;"	f	typeref:typename:double **
matrix_x_vector	matrix/operations_matrix.c	/^t_vector	matrix_x_vector(double **a, t_vector b)$/;"	f	typeref:typename:t_vector
max	minirt.h	/^	double		max;$/;"	m	struct:s_cylinder	typeref:typename:double
min	minirt.h	/^	double		min;$/;"	m	struct:s_cylinder	typeref:typename:double
minirt	README.md	/^# minirt$/;"	c
minor	matrix/determinant.c	/^double	minor(int row, int col, double **matrix, int size)$/;"	f	typeref:typename:double
mlx	Makefile	/^mlx:$/;"	t
mlx	minirt.h	/^	void			*mlx;$/;"	m	struct:s_mlx	typeref:typename:void *
mlx	mlx/test/main.c	/^void	*mlx;$/;"	v	typeref:typename:void *
mlx	mlx/test/new_win.c	/^void *mlx;$/;"	v	typeref:typename:void *
mlx_X_error	mlx/mlx_new_image.c	/^int	mlx_X_error;$/;"	v	typeref:typename:int
mlx_clear_window	mlx/mlx_clear_window.c	/^int		mlx_clear_window(t_xvar *xvar,t_win_list *win)$/;"	f	typeref:typename:int
mlx_col_name	mlx/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name[]
mlx_destroy_display	mlx/mlx_destroy_display.c	/^int	mlx_destroy_display(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_destroy_image	mlx/mlx_destroy_image.c	/^int	mlx_destroy_image(t_xvar *xvar, t_img *img)$/;"	f	typeref:typename:int
mlx_destroy_window	mlx/mlx_destroy_window.c	/^int	mlx_destroy_window(t_xvar *xvar,t_win_list *win)$/;"	f	typeref:typename:int
mlx_do_key_autorepeatoff	mlx/mlx_hook.c	/^int	mlx_do_key_autorepeatoff(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_do_key_autorepeaton	mlx/mlx_hook.c	/^int	mlx_do_key_autorepeaton(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_do_sync	mlx/mlx_hook.c	/^int	mlx_do_sync(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_expose_hook	mlx/mlx_expose_hook.c	/^int		mlx_expose_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_ext_fullscreen	mlx/mlx_ext_randr.c	/^int			mlx_ext_fullscreen(t_xvar *xvar, t_win_list *win, int fullscreen)$/;"	f	typeref:typename:int
mlx_flush_event	mlx/mlx_flush_event.c	/^int	mlx_flush_event(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_get_color_value	mlx/mlx_get_color_value.c	/^int             mlx_get_color_value(t_xvar *xvar,int color)$/;"	f	typeref:typename:int
mlx_get_data_addr	mlx/mlx_get_data_addr.c	/^char	*mlx_get_data_addr(t_img *img,int *bits_per_pixel,$/;"	f	typeref:typename:char *
mlx_get_screen_size	mlx/mlx_screen_size.c	/^int		mlx_get_screen_size(void *mlx_ptr, int *sizex, int *sizey)$/;"	f	typeref:typename:int
mlx_hook	mlx/mlx_hook.c	/^int	mlx_hook(t_win_list *win, int x_event, int x_mask, $/;"	f	typeref:typename:int
mlx_init	mlx/mlx_init.c	/^void	*mlx_init()$/;"	f	typeref:typename:void *
mlx_int_anti_resize_win	mlx/mlx_int_anti_resize_win.c	/^int	mlx_int_anti_resize_win(t_xvar *xvar,Window win,int w,int h)$/;"	f	typeref:typename:int
mlx_int_deal_shm	mlx/mlx_init.c	/^int		mlx_int_deal_shm(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_do_nothing	mlx/mlx_int_do_nothing.c	/^int	mlx_int_do_nothing(void *param)$/;"	f	typeref:typename:int
mlx_int_egal_img	mlx/mlx_lib_xpm.c	/^int	mlx_int_egal_img(XImage *img1,XImage *img2)$/;"	f	typeref:typename:int
mlx_int_file_get_rid_comment	mlx/mlx_xpm.c	/^int	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f	typeref:typename:int
mlx_int_get_col_name	mlx/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f	typeref:typename:int
mlx_int_get_good_color	mlx/mlx_get_color_value.c	/^int		mlx_int_get_good_color(t_xvar *xvar,int color)$/;"	f	typeref:typename:int
mlx_int_get_line	mlx/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_get_text_rgb	mlx/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f	typeref:typename:int
mlx_int_get_visual	mlx/mlx_int_get_visual.c	/^int		mlx_int_get_visual(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_new_image	mlx/mlx_new_image.c	/^void	*mlx_int_new_image(t_xvar *xvar,int width, int height,int format)$/;"	f	typeref:typename:void *
mlx_int_new_xshm_image	mlx/mlx_new_image.c	/^void	*mlx_int_new_xshm_image(t_xvar *xvar,int width,int height,int format)$/;"	f	typeref:typename:void *
mlx_int_param_ButtonPress	mlx/mlx_int_param_event.c	/^int	mlx_int_param_ButtonPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_ButtonRelease	mlx/mlx_int_param_event.c	/^int	mlx_int_param_ButtonRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_Expose	mlx/mlx_int_param_event.c	/^int	mlx_int_param_Expose(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_KeyPress	mlx/mlx_int_param_event.c	/^int	mlx_int_param_KeyPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_KeyRelease	mlx/mlx_int_param_event.c	/^int	mlx_int_param_KeyRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_MotionNotify	mlx/mlx_int_param_event.c	/^int	mlx_int_param_MotionNotify(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_event	mlx/mlx_int_param_event.c	/^int	(*(mlx_int_param_event[]))() =$/;"	v	typeref:typename:int (* ([]))()
mlx_int_param_generic	mlx/mlx_int_param_event.c	/^int	mlx_int_param_generic(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_undef	mlx/mlx_int_param_event.c	/^int	mlx_int_param_undef()$/;"	f	typeref:typename:int
mlx_int_parse_xpm	mlx/mlx_xpm.c	/^void	*mlx_int_parse_xpm(t_xvar *xvar,void *info,int info_size,char *(*f)())$/;"	f	typeref:typename:void *
mlx_int_rgb_conversion	mlx/mlx_init.c	/^int		mlx_int_rgb_conversion(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_set_win_event_mask	mlx/mlx_int_set_win_event_mask.c	/^int	mlx_int_set_win_event_mask(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_static_line	mlx/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_str_str	mlx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_str_cote	mlx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_to_wordtab	mlx/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f	typeref:typename:char **
mlx_int_wait_first_expose	mlx/mlx_int_wait_first_expose.c	/^int	mlx_int_wait_first_expose(t_xvar *xvar,Window win)$/;"	f	typeref:typename:int
mlx_int_xpm_f_image	mlx/mlx_lib_xpm.c	/^void		*mlx_int_xpm_f_image(t_xvar *xvar,int *width,int *height,$/;"	f	typeref:typename:void *
mlx_int_xpm_set_pixel	mlx/mlx_xpm.c	/^int	mlx_int_xpm_set_pixel(t_img *img, char *data, int opp, int col, int x)$/;"	f	typeref:typename:int
mlx_key_hook	mlx/mlx_key_hook.c	/^int		mlx_key_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_loop	mlx/mlx_loop.c	/^int			mlx_loop(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_loop_end	mlx/mlx_loop.c	/^int			mlx_loop_end(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_loop_hook	mlx/mlx_loop_hook.c	/^int	mlx_loop_hook(t_xvar *xvar,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_mouse_get_pos	mlx/mlx_mouse.c	/^int		mlx_mouse_get_pos(t_xvar *xvar, t_win_list *win, \\$/;"	f	typeref:typename:int
mlx_mouse_hide	mlx/mlx_mouse.c	/^int		mlx_mouse_hide(t_xvar *xvar, t_win_list *win)$/;"	f	typeref:typename:int
mlx_mouse_hook	mlx/mlx_mouse_hook.c	/^int		mlx_mouse_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_mouse_move	mlx/mlx_mouse.c	/^int		mlx_mouse_move(t_xvar *xvar, t_win_list *win, int x, int y)$/;"	f	typeref:typename:int
mlx_mouse_show	mlx/mlx_mouse.c	/^int		mlx_mouse_show(t_xvar *xvar, t_win_list *win)$/;"	f	typeref:typename:int
mlx_new_image	mlx/mlx_new_image.c	/^void	*mlx_new_image(t_xvar *xvar,int width, int height)$/;"	f	typeref:typename:void *
mlx_new_image2	mlx/mlx_new_image.c	/^void	*mlx_new_image2(t_xvar *xvar,int width, int height)$/;"	f	typeref:typename:void *
mlx_new_window	mlx/mlx_new_window.c	/^void	*mlx_new_window(t_xvar *xvar,int size_x,int size_y,char *title)$/;"	f	typeref:typename:void *
mlx_pixel_put	mlx/mlx_pixel_put.c	/^int		mlx_pixel_put(t_xvar *xvar,t_win_list *win,$/;"	f	typeref:typename:int
mlx_put_image_to_window	mlx/mlx_put_image_to_window.c	/^int	mlx_put_image_to_window(t_xvar *xvar,t_win_list *win,t_img *img,$/;"	f	typeref:typename:int
mlx_set_font	mlx/mlx_set_font.c	/^void	mlx_set_font(t_xvar *xvar, t_win_list *win, char *name)$/;"	f	typeref:typename:void
mlx_string_put	mlx/mlx_string_put.c	/^int		mlx_string_put(t_xvar *xvar,t_win_list *win,$/;"	f	typeref:typename:int
mlx_xpm_file_to_image	mlx/mlx_lib_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *filename,$/;"	f	typeref:typename:void *
mlx_xpm_file_to_image	mlx/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *file,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_to_image	mlx/mlx_lib_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **data,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_to_image	mlx/mlx_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **xpm_data,int *width,int *height)$/;"	f	typeref:typename:void *
mouse_click	manage_mlx.c	/^int	mouse_click(int button, int x, int y, t_mlx *mlx)$/;"	f	typeref:typename:int
mouse_hook	mlx/mlx_int.h	/^	int					(*mouse_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
mouse_param	mlx/mlx_int.h	/^	void				*mouse_param;$/;"	m	struct:s_win_list	typeref:typename:void *
mouse_win1	mlx/test/main.c	/^int	mouse_win1(int button,int x,int y, void *p)$/;"	f	typeref:typename:int
mouse_win2	mlx/test/main.c	/^int	mouse_win2(int button,int x,int y, void *p)$/;"	f	typeref:typename:int
mouse_win3	mlx/test/main.c	/^int	mouse_win3(int x,int y, void *p)$/;"	f	typeref:typename:int
multiplication	vector/vector_operations.c	/^t_vector	multiplication(t_vector v, double scalar)$/;"	f	typeref:typename:t_vector
multiply_color_by_scalar	colors/operation_color.c	/^t_color	multiply_color_by_scalar(t_color c, float scalar)$/;"	f	typeref:typename:t_color
multiply_colors	colors/operation_color.c	/^t_color	multiply_colors(t_color c1, t_color c2)$/;"	f	typeref:typename:t_color
multiply_matrix	matrix/operations_matrix.c	/^double	**multiply_matrix(int cols_a, int rows_b, double **a, double **b)$/;"	f	typeref:typename:double **
my_atof	extra/my_atof.c	/^double	my_atof(const char *str)$/;"	f	typeref:typename:double
my_clamp	colors/clamp.c	/^double	my_clamp(double value, double min_val, double max_val)$/;"	f	typeref:typename:double
my_key_pressed	rendering/key_pressed.c	/^int	my_key_pressed(int keycode, void *param)$/;"	f	typeref:typename:int
my_mlx_pixel_put	mlx_utils.c	/^void	my_mlx_pixel_put(t_mlx *data, int x, int y, int color)$/;"	f	typeref:typename:void
my_new_image	mlx_utils.c	/^void	my_new_image(t_mlx *data)$/;"	f	typeref:typename:void
my_sprintf	selection_status.c	/^void	my_sprintf(char *buffer, char *key, char *old_value, char *new_value)$/;"	f	typeref:typename:void
my_strcmp	extra/utils.c	/^int	my_strcmp(const char *str1, const char *str2)$/;"	f	typeref:typename:int
name	mlx/mlx_int.h	/^	char	*name;$/;"	m	struct:s_col_name	typeref:typename:char *
name	mlx/mlx_int.h	/^	int		name;$/;"	m	struct:s_xpm_col	typeref:typename:int
negate	vector/utils_vectors.c	/^t_vector	negate(t_vector vect)$/;"	f	typeref:typename:t_vector
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
next	minirt.h	/^	struct s_list_intersect	*next;$/;"	m	struct:s_list_intersect	typeref:struct:s_list_intersect *
next	mlx/mlx_int.h	/^	struct s_win_list	*next;$/;"	m	struct:s_win_list	typeref:struct:s_win_list *
normal	minirt.h	/^	t_vector	normal;$/;"	m	struct:s_plane	typeref:typename:t_vector
normalization	vector/complex_operations.c	/^t_vector	normalization(t_vector vector)$/;"	f	typeref:typename:t_vector
normalv	minirt.h	/^	t_vector	normalv;$/;"	m	struct:s_computations	typeref:typename:t_vector
norminette	Makefile	/^norminette: clean_mlx$/;"	t
num_cones	minirt.h	/^	int				num_cones;$/;"	m	struct:s_setting	typeref:typename:int
num_cylinders	minirt.h	/^	int				num_cylinders;$/;"	m	struct:s_setting	typeref:typename:int
num_lights	minirt.h	/^	int				num_lights;$/;"	m	struct:s_setting	typeref:typename:int
num_planes	minirt.h	/^	int				num_planes;$/;"	m	struct:s_setting	typeref:typename:int
num_spheres	minirt.h	/^	int				num_spheres;$/;"	m	struct:s_setting	typeref:typename:int
obj	minirt.h	/^	t_object	obj;$/;"	m	struct:s_intersection	typeref:typename:t_object
object	minirt.h	/^	t_object	object;$/;"	m	struct:s_computations	typeref:typename:t_object
open_and_count	parsing/parsing_map.c	/^static int	open_and_count(char *filename, t_setting *set)$/;"	f	typeref:typename:int	file:
open_map	parsing/parsing_map.c	/^int	open_map(char *filename, t_setting *set)$/;"	f	typeref:typename:int
orientation	minirt.h	/^	t_vector	orientation;$/;"	m	struct:s_camera	typeref:typename:t_vector
origin	minirt.h	/^	t_vector	origin;$/;"	m	struct:s_ray	typeref:typename:t_vector
original_addr	minirt.h	/^	void	*original_addr;$/;"	m	struct:s_object	typeref:typename:void *
over_point	minirt.h	/^	t_vector	over_point;$/;"	m	struct:s_computations	typeref:typename:t_vector
param	mlx/mlx_int.h	/^	void	*param;$/;"	m	struct:s_event_list	typeref:typename:void *
parse_args	mlx/configure	/^parse_args(){$/;"	f
parse_color	parsing/parsing_numbers.c	/^t_color	parse_color(char *str)$/;"	f	typeref:typename:t_color
parse_map	parsing/parsing_map.c	/^static int	parse_map(char *filename, t_setting *set)$/;"	f	typeref:typename:int	file:
parse_vector	parsing/parsing_numbers.c	/^t_vector	parse_vector(char *str, double flag)$/;"	f	typeref:typename:t_vector
parsing_map	main.c	/^int	parsing_map(char *map, t_setting *set)$/;"	f	typeref:typename:int
perform_translation_from_mouse	rendering/translation_handlers.c	/^void	perform_translation_from_mouse(t_mlx *mlx, int x, int y)$/;"	f	typeref:typename:void
phold	libft/ft_printf.c	/^static int	phold(va_list *arg, char q, int count)$/;"	f	typeref:typename:int	file:
pix	mlx/mlx_int.h	/^	Pixmap			pix;$/;"	m	struct:s_img	typeref:typename:Pixmap
planes	minirt.h	/^	t_plane			**planes;$/;"	m	struct:s_setting	typeref:typename:t_plane **
point	minirt.h	/^	t_vector	point;$/;"	m	struct:s_computations	typeref:typename:t_vector
point	minirt.h	/^	t_vector	point;$/;"	m	struct:s_plane	typeref:typename:t_vector
point_light	shadows/lighting.c	/^t_light	point_light(t_vector pos, t_color c)$/;"	f	typeref:typename:t_light
position	minirt.h	/^	t_vector	position;$/;"	m	struct:s_light	typeref:typename:t_vector
position_ray	raycasting/create_ray.c	/^t_vector	position_ray(t_ray ray, double t)$/;"	f	typeref:typename:t_vector
prepare_computations	computation.c	/^t_computations	prepare_computations(t_intersection i, t_ray r)$/;"	f	typeref:typename:t_computations
print_ambient_light	extra/print_debug2.c	/^void	print_ambient_light(t_amb_light *amb_light)$/;"	f	typeref:typename:void
print_camera	extra/print_debug2.c	/^void	print_camera(t_camera *camera)$/;"	f	typeref:typename:void
print_color	extra/print_debug2.c	/^void	print_color(t_color color)$/;"	f	typeref:typename:void
print_cylinders	extra/print_debug.c	/^void	print_cylinders(int n_cylinders, t_cylinder **array)$/;"	f	typeref:typename:void
print_header	my_tester.pl	/^sub print_header {$/;"	s
print_header	new_script_valgrind.pl	/^sub print_header$/;"	s
print_int_matrix	matrix/matrix_utils.c	/^void	print_int_matrix(int rows, int cols, double **matrix)$/;"	f	typeref:typename:void
print_intersection	intersection/old_list.c	/^void	print_intersection(t_intersection i)$/;"	f	typeref:typename:void
print_lights	extra/print_debug.c	/^void	print_lights(int n_lights, t_light **array)$/;"	f	typeref:typename:void
print_list	intersection/intersection_list.c	/^void	print_list(t_list_intersect **head, int debug)$/;"	f	typeref:typename:void
print_material	shadows/material.c	/^void	print_material(t_material mat)$/;"	f	typeref:typename:void
print_planes	extra/print_debug.c	/^void	print_planes(int n_planes, t_plane **array)$/;"	f	typeref:typename:void
print_ray	raycasting/create_ray.c	/^void	print_ray(t_ray ray)$/;"	f	typeref:typename:void
print_single_cylinder	extra/print_single.c	/^void	print_single_cylinder(t_cylinder *cyl)$/;"	f	typeref:typename:void
print_single_light	extra/print_debug.c	/^void	print_single_light(t_light *one_light)$/;"	f	typeref:typename:void
print_single_plane	extra/print_single.c	/^void	print_single_plane(t_plane *one_plane)$/;"	f	typeref:typename:void
print_single_sphere	extra/print_single.c	/^void	print_single_sphere(t_sphere *one_sphere)$/;"	f	typeref:typename:void
print_spheres	extra/print_debug.c	/^void	print_spheres(int n_spheres, t_sphere **array)$/;"	f	typeref:typename:void
print_string_array	extra/utils.c	/^void	print_string_array(char **array)$/;"	f	typeref:typename:void
print_type	raycasting/utils_obj.c	/^int	print_type(t_object obj)$/;"	f	typeref:typename:int
print_vector	extra/print_single.c	/^void	print_vector(t_vector vector)$/;"	f	typeref:typename:void
private_cmap	mlx/mlx_int.h	/^	int			private_cmap;$/;"	m	struct:s_xvar	typeref:typename:int
process_fractional_part	extra/my_atof.c	/^static double	process_fractional_part(const char *str, int *i)$/;"	f	typeref:typename:double	file:
process_integer_part	extra/my_atof.c	/^static double	process_integer_part(const char *str, int *i)$/;"	f	typeref:typename:double	file:
pshm_format	mlx/mlx_int.h	/^	int			pshm_format;$/;"	m	struct:s_xvar	typeref:typename:int
pt_putchar	libft/ft_printf_utils.c	/^int	pt_putchar(char c)$/;"	f	typeref:typename:int
pt_putstr	libft/ft_printf_utils.c	/^int	pt_putstr(char *str)$/;"	f	typeref:typename:int
pt_strlen	libft/ft_printf_utils.c	/^int	pt_strlen(const char *str)$/;"	f	typeref:typename:int
quick tip given by the professor:	README.md	/^#### quick tip given by the professor:$/;"	t	section:minirt""UC davis Computer Graphics course
r	minirt.h	/^	double	r;$/;"	m	struct:s_color	typeref:typename:double
ratio	minirt.h	/^	double	ratio;$/;"	m	struct:s_amb_light	typeref:typename:double
re	Makefile	/^re: fclean all$/;"	t
re	libft/Makefile	/^re: fclean all$/;"	t
re	mlx/Makefile	/^re	: clean all$/;"	t
re	mlx/test/Makefile.mk	/^re: clean all$/;"	t
re_start_image	mlx_utils.c	/^void	re_start_image(t_mlx *data)$/;"	f	typeref:typename:void
reflect	normal.c	/^t_vector	reflect(t_vector in, t_vector normal)$/;"	f	typeref:typename:t_vector
remove_new_line	extra/replace_me.c	/^void	remove_new_line(char **matrix, char replacement, char to_replace)$/;"	f	typeref:typename:void
replace_me	extra/replace_me.c	/^void	replace_me(char *str, char replacement, char to_replace)$/;"	f	typeref:typename:void
report_leaks	new_script_valgrind.pl	/^sub report_leaks$/;"	s
reset_selected_object	selected_obj.c	/^void	reset_selected_object(t_selected_obj *selected)$/;"	f	typeref:typename:void
root	mlx/mlx_int.h	/^	Window		root;$/;"	m	struct:s_xvar	typeref:typename:Window
rotate_object_axis_negative	rendering/rotation_handlers.c	/^void	rotate_object_axis_negative(t_mlx *data)$/;"	f	typeref:typename:void
rotate_object_axis_positive	rendering/rotation_handlers.c	/^void	rotate_object_axis_positive(t_mlx *data)$/;"	f	typeref:typename:void
rotation_x	transformations/rotations.c	/^t_vector	rotation_x(t_vector origin, double radians)$/;"	f	typeref:typename:t_vector
rotation_y	transformations/rotations.c	/^t_vector	rotation_y(t_vector origin, double radians)$/;"	f	typeref:typename:t_vector
rotation_z	transformations/rotations.c	/^t_vector	rotation_z(t_vector origin, double radians)$/;"	f	typeref:typename:t_vector
run_command	my_tester.pl	/^sub run_command {$/;"	s
run_valgrind	new_script_valgrind.pl	/^sub run_valgrind$/;"	s
s_amb_light	minirt.h	/^typedef struct s_amb_light$/;"	s
s_camera	minirt.h	/^typedef struct s_camera$/;"	s
s_col_name	mlx/mlx_int.h	/^struct	s_col_name$/;"	s
s_color	minirt.h	/^typedef struct s_color$/;"	s
s_computations	minirt.h	/^typedef struct s_computations$/;"	s
s_cylinder	minirt.h	/^typedef struct s_cylinder$/;"	s
s_event_list	mlx/mlx_int.h	/^typedef struct	s_event_list$/;"	s
s_img	mlx/mlx_int.h	/^typedef struct	s_img$/;"	s
s_intersection	minirt.h	/^typedef struct s_intersection$/;"	s
s_light	minirt.h	/^typedef struct s_light$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_list_intersect	minirt.h	/^typedef struct s_list_intersect$/;"	s
s_material	minirt.h	/^typedef struct s_material$/;"	s
s_mlx	minirt.h	/^typedef struct s_mlx$/;"	s
s_object	minirt.h	/^typedef struct s_object$/;"	s
s_plane	minirt.h	/^typedef struct s_plane$/;"	s
s_ray	minirt.h	/^typedef struct s_ray$/;"	s
s_selected_obj	minirt.h	/^typedef struct s_selected_obj$/;"	s
s_setting	minirt.h	/^typedef struct s_setting$/;"	s
s_sphere	minirt.h	/^typedef struct s_sphere$/;"	s
s_vector	minirt.h	/^typedef struct s_vector$/;"	s
s_win_list	mlx/mlx_int.h	/^typedef struct	s_win_list$/;"	s
s_xpm_col	mlx/mlx_int.h	/^typedef	struct	s_xpm_col$/;"	s
s_xvar	mlx/mlx_int.h	/^typedef struct	s_xvar$/;"	s
saved_mode	mlx/mlx_ext_randr.c	/^RRMode	saved_mode = 0;$/;"	v	typeref:typename:RRMode
scaling	transformations/scaling.c	/^t_vector	scaling(t_vector move, t_vector origin)$/;"	f	typeref:typename:t_vector
scaling_inverse	transformations/scaling.c	/^t_vector	scaling_inverse(t_vector move, t_vector origin)$/;"	f	typeref:typename:t_vector
screen	mlx/mlx_int.h	/^	int			screen;$/;"	m	struct:s_xvar	typeref:typename:int
search_i	rendering/mouse_select.c	/^static int	search_i(void **array, int count, void *target)$/;"	f	typeref:typename:int	file:
select_light	rendering/rendering_utils.c	/^void	select_light(t_selected_obj *selected)$/;"	f	typeref:typename:void
select_map	new_script_valgrind.pl	/^sub select_map$/;"	s
selected	minirt.h	/^	t_selected_obj	selected;$/;"	m	struct:s_mlx	typeref:typename:t_selected_obj
set_cylinder_cap	shapes/cylinder.c	/^void	set_cylinder_cap(t_cylinder *cylinder)$/;"	f	typeref:typename:void
set_cylinder_size	shapes/cylinder.c	/^void	set_cylinder_size(t_cylinder *cylinder, double min, double max)$/;"	f	typeref:typename:void
set_sphere_transformations	raycasting/transformation_ray.c	/^void	set_sphere_transformations(t_sphere *sphere, double **new)$/;"	f	typeref:typename:void
setback_zero	main_utils.c	/^void	setback_zero(t_setting *set)$/;"	f	typeref:typename:void
setting	minirt.h	/^	t_setting		*setting;$/;"	m	struct:s_mlx	typeref:typename:t_setting *
shade_hit	computation.c	/^t_color	shade_hit(t_setting *world, t_computations comps)$/;"	f	typeref:typename:t_color
shearing	transformations/shearing.c	/^t_vector	shearing(t_vector origin, double value[6])$/;"	f	typeref:typename:t_vector
shininess	minirt.h	/^	double	shininess;$/;"	m	struct:s_material	typeref:typename:double
shm	mlx/mlx_int.h	/^	XShmSegmentInfo	shm;$/;"	m	struct:s_img	typeref:typename:XShmSegmentInfo
shm_att_pb	mlx/mlx_new_image.c	/^int	shm_att_pb(Display *d,XErrorEvent *ev)$/;"	f	typeref:typename:int
show	mlx/Makefile.mk	/^show:$/;"	t
show	mlx/test/Makefile.mk	/^show:$/;"	t
show_help	mlx/configure	/^show_help(){$/;"	f
sigint_handler	mlx/test/run_tests.sh	/^sigint_handler(){$/;"	f
size_line	mlx/mlx_int.h	/^	int				size_line;$/;"	m	struct:s_img	typeref:typename:int
sl1	mlx/test/main.c	/^int	sl1;$/;"	v	typeref:typename:int
sl2	mlx/test/main.c	/^int	sl2;$/;"	v	typeref:typename:int
sl3	mlx/test/main.c	/^int	sl3;$/;"	v	typeref:typename:int
sl4	mlx/test/main.c	/^int	sl4;$/;"	v	typeref:typename:int
solve_quadratic_equation	intersection/intersection_cylinder.c	/^static	void	solve_quadratic_equation(double a, double b,$/;"	f	typeref:typename:void	file:
sort_intersection_list	intersection/sort_intersection.c	/^void	sort_intersection_list(t_list_intersect **head)$/;"	f	typeref:typename:void
specular	minirt.h	/^	double	specular;$/;"	m	struct:s_material	typeref:typename:double
spheres	minirt.h	/^	t_sphere		**spheres;$/;"	m	struct:s_setting	typeref:typename:t_sphere **
start_amb_light	starting/start_scenes.c	/^void	start_amb_light(t_setting *set, char **details)$/;"	f	typeref:typename:void
start_camera	starting/start_scenes.c	/^void	start_camera(t_setting *set, char **details)$/;"	f	typeref:typename:void
start_cylinder	starting/start_shapes.c	/^void	start_cylinder(t_setting *set, char **details)$/;"	f	typeref:typename:void
start_lights	starting/start_scenes.c	/^void	start_lights(t_setting *set, char **details)$/;"	f	typeref:typename:void
start_planes	starting/start_shapes.c	/^void	start_planes(t_setting *set, char **details)$/;"	f	typeref:typename:void
start_spheres	starting/start_shapes.c	/^void	start_spheres(t_setting *set, char **details)$/;"	f	typeref:typename:void
string_to_type	extra/type_string.c	/^t_type	string_to_type(char *type)$/;"	f	typeref:typename:t_type
strlcpy_is_not_posix	mlx/mlx_xpm.c	/^unsigned int	strlcpy_is_not_posix(char *dest, char *src, unsigned int size)$/;"	f	typeref:typename:unsigned int
struct_full_status	extra/print_debug2.c	/^void	struct_full_status(t_setting *set)$/;"	f	typeref:typename:void
struct_status	extra/print_debug2.c	/^void	struct_status(t_setting *set)$/;"	f	typeref:typename:void
submatrix	matrix/submatrix.c	/^double	**submatrix(int index_rows, int index_cols, double **matrix, int size)$/;"	f	typeref:typename:double **
subtract	vector/vector_operations.c	/^t_vector	subtract(t_vector v1, t_vector v2)$/;"	f	typeref:typename:t_vector
subtract_colors	colors/operation_color.c	/^t_color	subtract_colors(t_color c1, t_color c2)$/;"	f	typeref:typename:t_color
swap_two_doubles	extra/comparing.c	/^void	swap_two_doubles(double arr[2])$/;"	f	typeref:typename:void
t	minirt.h	/^	double		t;$/;"	m	struct:s_computations	typeref:typename:double
t	minirt.h	/^	double		t;$/;"	m	struct:s_intersection	typeref:typename:double
t_amb_light	minirt.h	/^}	t_amb_light;$/;"	t	typeref:struct:s_amb_light
t_camera	minirt.h	/^}	t_camera;$/;"	t	typeref:struct:s_camera
t_color	minirt.h	/^}	t_color;$/;"	t	typeref:struct:s_color
t_computations	minirt.h	/^}	t_computations;$/;"	t	typeref:struct:s_computations
t_cylinder	minirt.h	/^}	t_cylinder;$/;"	t	typeref:struct:s_cylinder
t_event_list	mlx/mlx_int.h	/^}				t_event_list;$/;"	t	typeref:struct:s_event_list
t_img	mlx/mlx_int.h	/^}				t_img;$/;"	t	typeref:struct:s_img
t_intersection	minirt.h	/^}	t_intersection;$/;"	t	typeref:struct:s_intersection
t_light	minirt.h	/^}	t_light;$/;"	t	typeref:struct:s_light
t_list	libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_list_intersect	minirt.h	/^}	t_list_intersect;$/;"	t	typeref:struct:s_list_intersect
t_material	minirt.h	/^}	t_material;$/;"	t	typeref:struct:s_material
t_mlx	minirt.h	/^}		t_mlx;$/;"	t	typeref:struct:s_mlx
t_object	minirt.h	/^}	t_object;$/;"	t	typeref:struct:s_object
t_plane	minirt.h	/^}	t_plane;$/;"	t	typeref:struct:s_plane
t_ray	minirt.h	/^}	t_ray;$/;"	t	typeref:struct:s_ray
t_selected_obj	minirt.h	/^}	t_selected_obj;$/;"	t	typeref:struct:s_selected_obj
t_setting	minirt.h	/^}	t_setting;$/;"	t	typeref:struct:s_setting
t_sphere	minirt.h	/^}	t_sphere;$/;"	t	typeref:struct:s_sphere
t_type	minirt.h	/^}	t_type;$/;"	t	typeref:enum:e_type
t_vector	minirt.h	/^}	t_vector;$/;"	t	typeref:struct:s_vector
t_win_list	mlx/mlx_int.h	/^}				t_win_list;$/;"	t	typeref:struct:s_win_list
t_xpm_col	mlx/mlx_int.h	/^}				t_xpm_col;$/;"	t	typeref:struct:s_xpm_col
t_xvar	mlx/mlx_int.h	/^}				t_xvar;$/;"	t	typeref:struct:s_xvar
test	Makefile	/^test: $(TEST_OBJ)$/;"	t
test_default_main	mlx/test/run_tests.sh	/^test_default_main(){$/;"	f
test_function	manage_mlx.c	/^void	test_function(t_mlx *info)$/;"	f	typeref:typename:void
transform	minirt.h	/^	double		**transform;$/;"	m	struct:s_cylinder	typeref:typename:double **
transform	minirt.h	/^	double		**transform;$/;"	m	struct:s_plane	typeref:typename:double **
transform	minirt.h	/^	double		**transform;$/;"	m	struct:s_sphere	typeref:typename:double **
transform_ray	raycasting/transformation_ray.c	/^t_ray	transform_ray(t_ray original, double **matrix)$/;"	f	typeref:typename:t_ray
transform_ray_to_object_space	intersection/intersection_cylinder.c	/^static	t_ray	transform_ray_to_object_space(t_cylinder *cylinder, t_ray ray)$/;"	f	typeref:typename:t_ray	file:
translate_object	rendering/translation_handlers.c	/^void	translate_object(t_mlx *data, t_vector delta)$/;"	f	typeref:typename:void
translations	transformations/translations.c	/^t_vector	translations(t_vector move, t_vector origin)$/;"	f	typeref:typename:t_vector
transposing	matrix/inversing.c	/^double	**transposing(int rows, int cols, double **matrix)$/;"	f	typeref:typename:double **
transposing_void	matrix/void.c	/^void	transposing_void(int rows, int cols, double **matrix)$/;"	f	typeref:typename:void
type	minirt.h	/^	t_type	type;$/;"	m	struct:s_object	typeref:typename:t_type
type	minirt.h	/^	t_type	type;$/;"	m	struct:s_selected_obj	typeref:typename:t_type
type	mlx/mlx_int.h	/^	int				type;$/;"	m	struct:s_img	typeref:typename:int
type_to_string	extra/type_string.c	/^char	*type_to_string(t_type type)$/;"	f	typeref:typename:char *
update_cylinder	shapes/cylinder.c	/^void	update_cylinder(t_cylinder *my_cylinder)$/;"	f	typeref:typename:void
use_xshm	mlx/mlx_int.h	/^	int			use_xshm;$/;"	m	struct:s_xvar	typeref:typename:int
v2normal_at	normal.c	/^t_vector	v2normal_at(t_object obj, t_vector point, t_ray r)$/;"	f	typeref:typename:t_vector
value_matrix	matrix/initialize_matrix.c	/^double	**value_matrix(double a[4], double b[4], double c[4], double d[4])$/;"	f	typeref:typename:double **
vector_to_labeled_str	selection_status.c	/^static char	*vector_to_labeled_str(char *label, t_vector vec)$/;"	f	typeref:typename:char *	file:
vector_to_str	selection_status.c	/^static char	*vector_to_str(t_vector vec)$/;"	f	typeref:typename:char *	file:
viewpoint	minirt.h	/^	t_vector	viewpoint;$/;"	m	struct:s_camera	typeref:typename:t_vector
visual	mlx/mlx_int.h	/^	Visual		*visual;$/;"	m	struct:s_xvar	typeref:typename:Visual *
w	minirt.h	/^	double	w;$/;"	m	struct:s_vector	typeref:typename:double
width	minirt.h	/^	int				width;$/;"	m	struct:s_mlx	typeref:typename:int
width	mlx/mlx_int.h	/^	int				width;$/;"	m	struct:s_img	typeref:typename:int
win	minirt.h	/^	void			*win;$/;"	m	struct:s_mlx	typeref:typename:void *
win1	mlx/test/main.c	/^void	*win1;$/;"	v	typeref:typename:void *
win1	mlx/test/new_win.c	/^void *win1;$/;"	v	typeref:typename:void *
win2	mlx/test/main.c	/^void    *win2;$/;"	v	typeref:typename:void *
win2	mlx/test/new_win.c	/^void *win2;$/;"	v	typeref:typename:void *
win3	mlx/test/main.c	/^void    *win3;$/;"	v	typeref:typename:void *
win_count	mlx/mlx_loop.c	/^static int	win_count(t_xvar *xvar)$/;"	f	typeref:typename:int	file:
win_list	mlx/mlx_int.h	/^	t_win_list	*win_list;$/;"	m	struct:s_xvar	typeref:typename:t_win_list *
window	mlx/mlx_int.h	/^	Window				window;$/;"	m	struct:s_win_list	typeref:typename:Window
window_close	manage_mlx.c	/^int	window_close(void *param)$/;"	f	typeref:typename:int
wm_delete_window	mlx/mlx_int.h	/^	Atom		wm_delete_window;$/;"	m	struct:s_xvar	typeref:typename:Atom
wm_protocols	mlx/mlx_int.h	/^	Atom		wm_protocols;$/;"	m	struct:s_xvar	typeref:typename:Atom
x	minirt.h	/^	double	x;$/;"	m	struct:s_vector	typeref:typename:double
xpm1_x	mlx/test/main.c	/^int	xpm1_x;$/;"	v	typeref:typename:int
xpm1_y	mlx/test/main.c	/^int	xpm1_y;$/;"	v	typeref:typename:int
y	minirt.h	/^	double	y;$/;"	m	struct:s_vector	typeref:typename:double
z	minirt.h	/^	double	z;$/;"	m	struct:s_vector	typeref:typename:double
